components:
  schemas:
    Users:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - username
    PostUsersRequest:
      type: object
      properties:
        username:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securepassword123"
      required:
        - username
        - password
    PatchUsersUserIdRequest:
      type: object
      properties:
        password:
          type: string
          format: password
          minLength: 8
          example: "newpassword123"
      required:
        - password
    Error:
      properties:
        details:
          example: Detailed error description
          type: string
        error:
          example: Error message
          type: string
      required:
      - error
    GetPostTaskResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          minLength: 1
        description:
          type: string
          nullable: true
        status:
          type: string
          enum:
            - pending
            - in_progress
            - completed
          default: pending
        user_id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - status
        - user_id
        - createdAt
        - updatedAt
    PostTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          example: "New task title"
        description:
          type: string
          nullable: true
          example: "Detailed task description"
        status:
          type: string
          enum:
            - pending
            - in_progress
            - completed
          default: pending
          example: "pending"
      required:
        - title
    PatchTaskRequest:
      properties:
        title:
          type: string
          minLength: 1
          example: "Updated task title"
        description:
          type: string
          nullable: true
          example: "Updated task description"
        status:
          type: string
          enum:
            - pending
            - in_progress
            - completed
          example: "in_progress"
    PostSessionRequest:
      properties:
        username:
          type: string
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "yourpassword123"
      required:
        - username
        - password
      type: object
    PostSessionResponse:
      properties:
        token:
          type: string
          description: JWT token for authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      type: object
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad request
    ForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Access forbidden
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal server error
    NotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Resource not found
    UnauthorizedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Authentication required
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      description: JWT token for authentication
      scheme: bearer
      type: http
info:
  contact:
    email: dev@example.com
    name: Development Team
  description: API for managing tasks with full documentation
  title: Task Management API
  version: 1.0.0
openapi: 3.1.0
paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Register a new user account
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUsersRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Users
      summary: List all users
      description: Get a list of all users
      operationId: getUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: ID of the user
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Get detailed information about a specific user
      operationId: getUserById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Users
      summary: Delete user account
      description: Delete user's account and all associated tasks
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Users
      summary: Update user
      description: Update user information (currently only password)
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUsersUserIdRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /sessions:
    post:
      tags:
        - Authentication
      summary: Login to get JWT token
      description: Authenticate user and receive JWT token
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSessionRequest'
        required: true
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSessionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Authentication
      summary: Delete current session
      description: Delete the current user's session
      operationId: deleteSession
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Session successfully deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks
      parameters:
        - name: page
          in: query
          description: Page number for pagination (starts from 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            default: 10
        - name: sort
          in: query
          description: Sort field and direction (e.g., title:asc, createdAt:desc)
          schema:
            type: string
        - name: status
          in: query
          description: Filter tasks by status
          schema:
            type: string
            enum:
              - pending
              - in_progress
              - completed
      description: Retrieve a list of all tasks with pagination, sorting, and filtering
      operationId: getAllTasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    description: Current page number
                  limit:
                    type: integer
                    description: Number of items per page
                  total:
                    type: integer
                    description: Total number of tasks
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/GetPostTaskResponse'
                required:
                  - page
                  - limit
                  - total
                  - tasks
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Create a new task
      operationId: createTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostTaskResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks/{taskId}:
    parameters:
      - name: taskId
        in: path
        required: true
        description: ID of the task to modify
        schema:
          type: integer
          format: int64
    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: Delete a specific task by ID
      operationId: deleteTask
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Task successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Tasks
      summary: Update a task
      description: Update an existing task's fields
      operationId: updateTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostTaskResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
security:
- bearerAuth: []
servers:
- description: Development server
  url: /
x-tagGroups:
- name: API Documentation
  tags:
    - Authentication
    - Tasks

tags:
- description: Authentication endpoints
  name: Authentication
- description: Task management endpoints
  name: Tasks
